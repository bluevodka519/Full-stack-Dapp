name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Smart Contract Testing
  contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: contract/package-lock.json
        
    - name: Install contract dependencies
      working-directory: ./contract
      run: npm ci
      
    - name: Compile contracts
      working-directory: ./contract
      run: npx hardhat compile
      
    - name: Run contract tests
      working-directory: ./contract
      run: npm test
      
    - name: Generate test coverage
      working-directory: ./contract
      run: npx hardhat coverage
      continue-on-error: true
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./contract/coverage/lcov.info
        flags: contracts
        name: contract-coverage
      continue-on-error: true

  # Frontend Testing and Build
  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./client
      run: npm run lint
      continue-on-error: true
      
    - name: Run type checking
      working-directory: ./client
      run: npx tsc --noEmit
      
    - name: Build frontend
      working-directory: ./client
      run: npm run build
      
    - name: Run frontend tests
      working-directory: ./client
      run: npm test
      continue-on-error: true

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Audit contract dependencies
      working-directory: ./contract
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Audit frontend dependencies
      working-directory: ./client
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [contract-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install contract dependencies
      working-directory: ./contract
      run: npm ci
      
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Start Hardhat network
      working-directory: ./contract
      run: npx hardhat node &
      
    - name: Wait for network
      run: sleep 10
      
    - name: Deploy contracts
      working-directory: ./contract
      run: |
        npx hardhat run scripts/deploy-counter.ts --network localhost
        npx hardhat run scripts/deploy-token.ts --network localhost
      
    - name: Build frontend
      working-directory: ./client
      run: npm run build
      
    - name: Start frontend
      working-directory: ./client
      run: npm start &
      
    - name: Wait for frontend
      run: sleep 15
      
    - name: Run integration tests
      run: |
        echo "Integration tests would run here"
        echo "Testing contract deployment and frontend connectivity"
        curl -f http://localhost:3000 || exit 1

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [contract-tests, frontend-tests, security-audit, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Build frontend for production
      working-directory: ./client
      run: npm run build
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./client
      continue-on-error: true
      
    - name: Notify deployment status
      run: |
        echo "Deployment completed"
        echo "Frontend deployed to production"
        echo "Smart contracts ready for testnet deployment"

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        cd contract && npm ci
        cd ../client && npm ci
        
    - name: Run Prettier check
      working-directory: ./client
      run: npx prettier --check .
      continue-on-error: true
      
    - name: Check for TODO comments
      run: |
        echo "Checking for TODO comments..."
        grep -r "TODO\|FIXME\|HACK" --include="*.ts" --include="*.tsx" --include="*.sol" . || true
        
    - name: Check file sizes
      run: |
        echo "Checking large files..."
        find . -type f -size +1M -not -path "./node_modules/*" -not -path "./.git/*" || true
